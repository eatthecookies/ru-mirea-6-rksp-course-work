from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from blog.models import Blog, Post, Comment
from faker import Faker
import random
import uuid
import json

fake = Faker()

class Command(BaseCommand):
    help = "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –±–ª–æ–≥–∏, –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"

    def handle(self, *args, **kwargs):
        self.create_users(5)
        self.create_blogs(10)
        self.create_posts(20)
        self.create_comments(50)
        self.stdout.write(self.style.SUCCESS('‚úÖ –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã'))

    def create_users(self, count):
        self.users = []
        for _ in range(count):
            username = fake.user_name()
            email = fake.email()
            user = User.objects.create_user(username=username, email=email, password="test1234")
            self.users.append(user)

    def create_blogs(self, count):
        self.blogs = []
        for _ in range(count):
            blog = Blog.objects.create(
                title=fake.catch_phrase(),
                description=fake.paragraph(nb_sentences=3),
                author=random.choice(self.users)
            )
            self.blogs.append(blog)

    def create_posts(self, count):
        self.posts = []
        for _ in range(count):
            blog = random.choice(self.blogs)
            post_content = self.generate_post_content()
            post = Post.objects.create(
                blog=blog,
                title=fake.sentence(nb_words=6),
                content=post_content,  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                author=blog.author
            )
            self.posts.append(post)

    def create_comments(self, count):
        for _ in range(count):
            post = random.choice(self.posts)
            user = random.choice(self.users)
            Comment.objects.create(
                post=post,
                author=user,
                content=self.generate_crazy_comment()
            )

    def generate_normal_comment(self):
        city = fake.city()
        comments = [
            f"–ù–µ–¥–∞–≤–Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ {city} ‚Äî –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!",
            f"–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Å—Ç–∞—Ç—å—è, –¥–æ–±–∞–≤–∏–ª {city} –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
            f"–ë—ã–ª –≤ {city} –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –Ω–∞–∑–∞–¥, –Ω–æ—Å—Ç–∞–ª—å–≥–∏—è –Ω–∞–∫—Ä—ã–ª–∞.",
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–µ–¥—É –≤ {city}!",
            f"–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ—Å—Ç! –í–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è –Ω–∞ –ø–æ–µ–∑–¥–∫—É –≤ {city}.",
            f"–õ—é–±–ª—é —á–∏—Ç–∞—Ç—å —Ç–∞–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è."
        ]
        return random.choice(comments)


    def generate_post_content(self):
        content = [
            {
                "id": str(uuid.uuid4()),
                "type": "paragraph",
                "props": {
                    "textColor": "default",
                    "backgroundColor": "default",
                    "textAlignment": "left"
                },
                "content": [
                    {"type": "text", "text": "–î–∞—Ç–∞:", "styles": {"bold": True}},
                    {"type": "text", "text": f" {fake.date_between(start_date='-30d', end_date='today').strftime('%d %B %Y')}\n", "styles": {}}
                ],
                "children": []
            },
            {
                "id": str(uuid.uuid4()),
                "type": "heading",
                "props": {
                    "textColor": "default",
                    "backgroundColor": "default",
                    "textAlignment": "left",
                    "level": 2
                },
                "content": [{"type": "text", "text": "üìç –ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", "styles": {}}],
                "children": []
            },
            {
                "id": str(uuid.uuid4()),
                "type": "paragraph",
                "props": {
                    "textColor": "default",
                    "backgroundColor": "default",
                    "textAlignment": "left"
                },
                "content": [
                    {"type": "text", "text": "–õ–æ–∫–∞—Ü–∏—è:", "styles": {"bold": True}},
                    {"type": "text", "text": f" {fake.city()}, –†–æ—Å—Å–∏—è\n", "styles": {}},
                    {"type": "text", "text": "–ö–∞–∫ –¥–æ–±–∏—Ä–∞–ª—Å—è:", "styles": {"bold": True}},
                    {"type": "text", "text": " –ù–∞ –º–∞—à–∏–Ω–µ\n", "styles": {}},
                    {"type": "text", "text": "–ü–æ–≥–æ–¥–∞:", "styles": {"bold": True}},
                    {"type": "text", "text": f" +{random.randint(5,25)}¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ\n", "styles": {}}
                ],
                "children": []
            }
        ]
        return json.dumps(content, ensure_ascii=False)
